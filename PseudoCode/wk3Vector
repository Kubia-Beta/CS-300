///////////////////////////
// By:                 ///
// Connor Sculthorpe  ///
// 14 April 2024     ///
///////////////////////

Vector<course> CourseVector;

/**
  * Opens a file, reads its data, and parses each line and adds it to the vector
  *
  * Time: O(n)
  * Space: O(n)
  * @param string filename to be opened
  */
void CreateVectorFromFile(string file) {
	string line = ""; // Holds each line read from file
	verifyFile(file);
	
	// Initialize our variables for holding course information
	vector<string> prerequisites;
	string number;
	string title;
	
	ifstream infile(file); // Open the file

	while (getline(file, line)){ // Read each line from the file
		istringstream iss(line);
		string token;
		int i = 0;
		
		while (getline(iss, token, ',')){ // Parse the line by commas, token holds the values
			i++ // Increase the line count by 1
			
			if (i > 2){ // Add the prerequisites to the vector after the first two commas
				prerequisites.push_back(token);
			} else if (i == 1){ // The first line ex. "CSCI100"
				number = token;
			} else if (i == 2){ // The second line ex. "Introduction to Computer Science"
				title = token;
			}
		} // The line has been fully read
		Course course(number, title, prerequisites); // Create a course object with the parsed data
		CourseVector.push_back(course); // Insert that course object into the CourseVector
	} // Continues looping until all lines have been parsed into course in BST
	
	
	
	infile.close(); // Close the file
}

 /**
  * Prints a course's vector contents for prerequisites
  *
  * Time: O(n)
  * Space: O(1)
  * @param vector<string> Vector to be printed
  */
void vectorPrinter(vector<string> Vector) {
	for (auto i: Vector){
		cout << i << ",";
	}
	cout << endl;
}

 /**
  * Prints all course information
  *
  * Time: O(n)
  * Space: O(1)
  */
void CourseVectorPrinter() {
    for (const Course& course : CourseVector) {
        cout << "Course Number: " << course.courseNumber << ", Course Title: " << course.courseTitle << endl;
        cout << "Prerequisites: ";
        vectorPrinter(course.coursePrerequisites);
    }
}

 /**
  * Sorts the vector in alphanumeric order, lowest to highest
  *
  * Time: O(n log n)
  * Space: O(log n)
  * Reference: https://www.geeksforgeeks.org/analysis-of-time-and-space-complexity-of-stl-containers/
  */
void SortVectorByCourseNumber() {
	// Sort the extracted courses by course number using a lambda function
	sort(CourseVector.begin(), CourseVector.end(), [](const Course& a, const Course& b)) {
		return std::stoi(a.courseNumber) < std::stoi(b.courseNumber);
	});

}

 /**
  * Removes a course from a vector based on courseNumber
  *
  * Time: O(n)
  * Space: O(1)
  * @param string courseNumber courseNumber to be erased
  */
void RemoveCourseFromVector(string courseNumber) {
	for (const Course course : vec) { // Iterate through each object in the vector
		if (course.courseNumber.find(courseNumber)) != std::string::npos) { // If courseNumber is found
			remove(CourseVector.begin(), CourvseVector.end(), const course); // Remove it
		}
	}
}

 /**
  * Finds a course from a vector based on courseNumber
  *
  * Time: O(n)
  * Space: O(1)
  * @param string courseNumber courseNumber to be searched for
  */
Course SearchCourseVector(string courseNumber) {
	for (const Course course : vec) { // Iterate through each object in the vector
		if (course.courseNumber.find(courseNumber)) != std::string::npos) { // If courseNumber is found
			return course;
		}
	}
	return nullptr; // Not found
}