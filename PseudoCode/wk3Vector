///////////////////////////
// By:                 ///
// Connor Sculthorpe  ///
// 13 April 2024     ///
///////////////////////

 /**
  * Time: O(1)
  * Space: O(n)
  */
struct Course { // Structure to hold course information
	string courseNumber;
	string courseTitle;
	vector<string> coursePrerequisites;
	
	Course(){ // Default constructor
		this->courseNumber = INT_MAX; // INT_MAX for debugging
	}
	Course(string title) : Course(){ // Constructor chain
		this->courseTitle = "";
	}
	Course(vector<string> prerequisites) : Course (string title) {
		this->vector<string> coursePrerequisites = prerequisites;
	}
	Course(string number, string title, vector<string> prerequisites) : Course(vector<string> prerequisites){
		this->courseNumber = number;
		this->courseTitle = title;
		this->coursePrerequisites = prerequisites;
	}
	bool operator<(const Course &leftCourse, const Course &rightCourse) { // Overload < operator for sorting
		return stoi(leftCourse.courseNumber) < stoi(rightCourse.courseNumber);
	}
}

class CourseVector {
	private:
	CreateVectorFromFile(string file);
	vectorPrinter(vector<string> Vector);
	public:
	CourseVectorPrinter();
	VectorSorting();
}

/**
  * Opens a file, reads its data, and parses each line and adds it to the Binary Search Tree
  *
  * Time: O(n)
  * Space: O(n)
  * @param string filename to be opened
  */
void CreateVectorFromFile(string file) {
	string line = ""; // Holds each line read from file
	verifyFile(file);
	
	// Initialize our variables for holding course information
	vector<string> prerequisites;
	string number;
	string title;
	
	ifstream infile(file); // Open the file

	while (getline(file, line)){ // Read each line from the file
		istringstream iss(line);
		string token;
		int i = 0;
		
		while (getline(iss, token, ',')){ // Parse the line by commas, token holds the values
			i++ // Increase the line count by 1
			
			if (i > 2){ // Add the prerequisites to the vector after the first two commas
				prerequisites.push_back(token);
			} else if (i == 1){ // The first line ex. "CSCI100"
				number = token;
			} else if (i == 2){ // The second line ex. "Introduction to Computer Science"
				title = token;
			}
		} // The line has been fully read
		Course course(number, title, prerequisites); // Create a course object with the parsed data
		CourseVector.push_back(course); // Insert that course object into the CourseVector
	} // Continues looping until all lines have been parsed into course in BST

		

	infile.close(); // Close the file
}

 /**
  * Prints a course's vector contents for prerequisites
  *
  * Time: O(n)
  * Space: O(1)
  * @param vector<string> Vector to be printed
  */
void vectorPrinter(vector<string> Vector) {
	for (auto i: Vector){
		cout << i << ",";
	}
	cout << endl;
}

 /**
  * Prints all course information
  *
  * Time: O(n)
  * Space: O(1)
  */
void CourseVectorPrinter() {
    for (const Course& course : CourseVector) {
        cout << "Course Number: " << course.courseNumber << ", Course Title: " << course.courseTitle << endl;
        cout << "Prerequisites: ";
        vectorPrinter(course.coursePrerequisites);
    }
}

 /**
  * Sorts the vector in alphanumeric order, lowest to highest
  *
  * Time: O()
  * Space: O()
  */
void VectorSorting(){
	//FIXME: implement logic
}