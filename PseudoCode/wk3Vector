///////////////////////////
// By:                 ///
// Connor Sculthorpe  ///
// 13 April 2024     ///
///////////////////////

 /**
  * Time: O(1)
  * Space: O(n)
  */
struct Course { // Structure to hold course information
	int courseNumber;
	string courseTitle;
	vector<string> coursePrerequisites;
	
	Course(){ // Default constructor
		this->courseNumber = INT_MAX; // INT_MAX for debugging
	}
	Course(string title) : Course(){ // Constructor chain
		this->courseTitle = "";
	}
	Course(vector<string> prerequisites) : Course (string title) {
		this->vector<string> coursePrerequisites = prerequisites;
	}
	Course(int number, string title, vector<string> prerequisites) : Course(vector<string> prerequisites){
		this->courseNumber = number;
		this->courseTitle = title;
		this->coursePrerequisites = prerequisites;
	}
}

// Open the file, read the data, parse each line, and check for file format errors
void openAndReadFile(string file, Vector<Course> courses) {
	string filename = file
	verifyFile(filename)
	
	try {
		ifstream infile(filename)
		if file.good() {
			while (getline, line) {
				read line from file, set to inLine // Delimiter? Have to see first
				if number of parameters in line >= 2 {
					if all prerequisites exist as courses in the file {
						createCourseObjects(inLine) // Create Course object with extracted data
					} else { // prerequisites do not exist in file
						throw FileFormatException("Prerequisite course not found");
					}
				} else { // Paramater count must be less than 2
					throw FileFormatException("Incorrect file format");
				}
			}
			close file
		} else {
			throw FileOpenException("Unable to open file");
		}
	} catch (FileOpenException e) {
		print error message
		close file // Depending on method, it may be a stream and not just a literal file, so close it.
	} catch (FileFormatException e) {
		print error message
		close file
	}
}



// Create course objects and store them in the appropriate data structure
void createCourseObjects(string line) {
	string courseNumber to getline(',') // Grab the first line
	string courseTitle to getline(',') // Now the second
	string temp
	vector<int> coursePrerequisites
	// Now create the object
	while(getline(','){
		Grabs the rest of the line, adds to temp, then adds to prereq vector then loops
	}
	Course newCourse
	set newCourse to hold courseNumber
	set newCourse to hold courseTitle
	set newCourse to hold coursePrerequisites
	all through Course()
}
}

// Search the data structure for a specific course and print course information and prerequisites
void searchAndPrintCourse(Vector<Course> courses, string courseNumber) {
	for each course in courses {
		if course.number == courseNumber {
			print course information (number, title) // Call a separate print function instead?
			for each prerequisite of the course {
				print prerequisite course information (number, title)
			}
			return; // exit loop if course is found
		}
	}
	print "Course not found";
}

/**
  * Opens a file, reads its data, and parses each line and adds it to the Binary Search Tree
  *
  * Time: O(n * k), where n is the number of lines and k is the number of prerequisites per line
  * Space: O(n * k), where n is the number of lines and k is the number of prerequisites per line
  * @param string filename to be opened
  */
void CreateVectorFromFile(string file) {
	string line = ""; // Holds each line read from file
	verifyFile(file);
	
	// Initialize our variables for holding course information
	vector<string> prerequisites;
	string number;
	string title;
	
	ifstream infile(file); // Open the file

	while (getline(file, line)){ // Read each line from the file
		istringstream iss(line);
		string token;
		int i = 0;
		
		while (getline(iss, token, ',')){ // Parse the line by commas, token holds the values
			i++ // Increase the line count by 1
			
			if (i > 2){ // Add the prerequisites to the vector after the first two commas
				prerequisites.push_back(token);
			} else if (i == 1){ // The first line ex. "CSCI100"
				number = token;
			} else if (i == 2){ // The second line ex. "Introduction to Computer Science"
				title = token;
			}
		} // The line has been fully read
		Course course(number, title, prerequisites); // Create a course object with the parsed data
		CourseVector.push_back(course); // Insert that course object into the tree
	} // Continues looping until all lines have been parsed into course in BST

		

	infile.close(); // Close the file
}